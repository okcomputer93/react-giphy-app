{"version":3,"sources":["components/AddCategory.js","helpers/fetchGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","event","preventDefault","trim","length","previousCategories","type","value","onChange","target","fetchGifs","query","a","url","encodeURI","fetch","response","json","data","map","gif","id","title","images","original","GifGridItem","className","src","alt","GifGrid","category","loading","state","setState","useEffect","gifs","getGifs","useFetchGifs","image","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMA4BeA,EAzBK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACLC,mBAAS,IADJ,mBAClCC,EADkC,KACtBC,EADsB,KAczC,OACE,sBAAMC,SAVO,SAACC,GACdA,EAAMC,iBAEFJ,EAAWK,OAAOC,OAAS,IAE/BR,GAAc,SAACS,GAAD,OAAyBP,GAAzB,mBAAwCO,OACtDN,EAAc,MAId,SACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAbhB,SAACP,GAAD,OAAWF,EAAcE,EAAMQ,OAAOF,a,+BCNrDG,EAAS,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,6DACjBC,EADiB,iDAC+BC,UACpDH,GAFqB,+DAIAI,MAAMF,GAJN,cAIjBG,EAJiB,gBAKAA,EAASC,OALT,uBAKfC,EALe,EAKfA,KALe,kBAMhBA,EAAKC,KAAI,SAACC,GACf,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXT,IAAKO,EAAIG,OAAOC,SAASX,SAVN,2CAAH,sDCWPY,EATK,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOT,EAAU,EAAVA,IAC5B,OACE,sBAAKa,UAAU,yCAAf,UACE,qBAAKC,IAAKd,EAAKe,IAAKN,IACpB,qCAAaA,QCcJO,EAhBC,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,ECDN,SAACnB,GAAW,IAAD,EACXd,mBAAS,CACjCqB,KAAM,GACNa,SAAS,IAH0B,mBAC9BC,EAD8B,KACvBC,EADuB,KAiBrC,OAXAC,qBAAU,YACK,uCAAG,4BAAAtB,EAAA,sEACKF,EAAUC,GADf,OACRwB,EADQ,OAEdF,EAAS,CACPf,KAAMiB,EACNJ,SAAS,IAJG,2CAAH,oDAObK,KACC,CAACzB,IAEGqB,EDf2BK,CAAaP,GAAvCC,EADwB,EACxBA,QAAeR,EADS,EACfL,KAEjB,OACE,qCACE,oBAAIQ,UAAU,oCAAd,SAAmDI,IAClDC,GAAW,mBAAGL,UAAU,mCAAb,qBACZ,qBAAKA,UAAU,YAAf,SACGH,EAAOJ,KAAI,SAACmB,GAAD,OACV,cAAC,EAAD,eAAgCA,GAAdA,EAAMjB,aEQnBkB,EAjBM,WAAO,IAAD,EACW1C,mBAAS,CAAC,WADrB,mBAClB2C,EADkB,KACN5C,EADM,KAGzB,OACE,qCACE,4CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BACG4C,EAAWrB,KAAI,SAACW,GAAD,OACd,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCTxBW,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.3463776f.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState('');\n\n  const handleInputChange = (event) => setInputValue(event.target.value);\n\n  const submit = (event) => {\n    event.preventDefault();\n\n    if (inputValue.trim().length < 2) return;\n\n    setCategories((previousCategories) => [inputValue, ...previousCategories]);\n    setInputValue('');\n  };\n\n  return (\n    <form onSubmit={submit}>\n      <input type=\"text\" value={inputValue} onChange={handleInputChange} />\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n};\n\nexport default AddCategory;\n","export const fetchGifs = async (query) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\n    query\n  )}&limit=10&api_key=c50DwY20F9H8c5ch4mY0oGwQc7PsM60A`;\n  const response = await fetch(url);\n  const { data } = await response.json();\n  return data.map((gif) => {\n    return {\n      id: gif.id,\n      title: gif.title,\n      url: gif.images.original.url,\n    };\n  });\n};\n","import React from 'react';\n\nconst GifGridItem = ({ title, url }) => {\n  return (\n    <div className=\"card animate__animated animate__fadeIn\">\n      <img src={url} alt={title} />\n      <figcaption>{title}</figcaption>\n    </div>\n  );\n};\n\nexport default GifGridItem;\n","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport GifGridItem from './GifGridItem';\n\nconst GifGrid = ({ category }) => {\n  const { loading, data: images } = useFetchGifs(category);\n\n  return (\n    <>\n      <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n      {loading && <p className=\"animate__animated animate__flash\">Loading</p>}\n      <div className=\"card-grid\">\n        {images.map((image) => (\n          <GifGridItem key={image.id} {...image} />\n        ))}\n      </div>\n    </>\n  );\n};\n\nexport default GifGrid;\n","import { useState, useEffect } from 'react';\nimport { fetchGifs } from '../helpers/fetchGifs';\n\nexport const useFetchGifs = (query) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    const getGifs = async () => {\n      const gifs = await fetchGifs(query);\n      setState({\n        data: gifs,\n        loading: false,\n      });\n    };\n    getGifs();\n  }, [query]);\n\n  return state;\n};\n","import React, { useState } from 'react';\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\nconst GifExpertApp = () => {\n  const [categories, setCategories] = useState(['Naruto']);\n\n  return (\n    <>\n      <h2>Gif Expert</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n      <ol>\n        {categories.map((category) => (\n          <GifGrid key={category} category={category} />\n        ))}\n      </ol>\n    </>\n  );\n};\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(<GifExpertApp />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}